@mixin columns ($columns: 1, $gutter: 0rem, $flush-right: true, $items: '> *') {
  display: block;
  box-sizing: border-box;
  &:after {
    content: '';
    display: table;
    clear: both;
  }
  #{ $items } {
    $width: #{ 100% / $columns } - #{ ($columns - 1) / $columns * $gutter };
    display: block;
    box-sizing: border-box;
    width: 100% / $columns;
    width: -webkit-calc(#{ $width });
    width: -moz-calc(#{ $width });
    width: calc(#{ $width });
    @if $items == '> *' {
      &:nth-child(n) {
        float: left;
        margin-top: $gutter;
        margin-left: $gutter * .999;
      }
      &:nth-child(#{ $columns }n + 1) {
        margin-left: 0;
      }
      &:nth-child(-n+#{ $columns }) {
        margin-top: 0;
      }
      @if $flush-right {
        &:nth-child(#{ $columns }n) {
          float: right;
        }
      }
    }
    @else {
      &:nth-of-type(n) {
        float: left;
        margin-top: $gutter;
        margin-left: $gutter * .999;
      }
      &:nth-of-type(#{ $columns }n + 1) {
        margin-left: 0;
      }
      &:nth-of-type(-n+#{ $columns }) {
        margin-top: 0;
      }
      @if $flush-right {
        &:nth-of-type(#{ $columns }n) {
          float: right;
        }
      }
    }
  }
}

@mixin span ($span: $columns of $parent-columns, $gutter: 0rem) {
  $columns: nth($span, 1);
  $parent-columns: nth($span, 3);
  $relative-columns: $parent-columns / $columns;
  $width: #{ 100% / $relative-columns } - #{ ($relative-columns - 1) / $relative-columns * $gutter };
  width: 100% / $relative-columns;
  width: -webkit-calc(#{ $width });
  width: -moz-calc(#{ $width });
  width: calc(#{ $width });
